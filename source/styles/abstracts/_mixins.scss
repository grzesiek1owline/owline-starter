// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }

  @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/// Owline

// ----------------
//     MIXINS
// ----------------

// box-sizing
@mixin box-sizing($type) {
  -webkit-box-sizing: $type;
  -moz-box-sizing: $type;
  box-sizing: $type;
}

// clearfix
@mixin clearfix {
  &::before,
  &::after {
    content: " ";
    display: table;
  }

  &::after {
    clear: both;
  }

  & {
    *zoom: 1;
  }
}

@mixin border_btn() {
  display: inline-block;
  padding: 10 30;
  min-height: 40;
  overflow: hidden;
  text-decoration: none;
  text-align: center;
  padding-top: 9px;
  transition: all 0.2s ease;
  font-size: 1rem;
  position: relative;
  z-index: 2;
  line-height: 1.135;
  max-width: 100%;

  &::before {
    content: "";
    position: absolute;
    left: 0;
    top: -100%;
    width: 100%;
    height: 100%;
    z-index: -1;
    -webkit-transition: all 0.1s linear;
    transition: all 0.1s linear;
  }

  &:hover::before {
    top: 0;
  }
}

@mixin owl_btn($bg, $color) {
  color: $color;
  background-color: $bg;
  border: 2px solid $color;

  &:hover {
    color: $bg;
  }

  &::before {
    background-color: $color;
  }
}

// Transitions
@mixin transition($props: all, $speed: 0.2s, $easing: easy) {
  -webkit-transition: $props $speed $easing;
  -moz-transition: $props $speed $easing;
  -o-transition: $props $speed $easing;
  -ms-transition: $props $speed $easing;
  transition: $props $speed $easing;
}

@mixin filter($gray, $tran) {
  filter: grayscale($gray) opacity($tran);
}

// ::selection
@mixin selection($color, $bgcolor, $elem: "") {
  #{$elem}::-webkit-selection {
    color: $color;
    background-color: $bgcolor;
  }

  #{$elem}::-moz-selection {
    color: $color;
    background-color: $bgcolor;
  }

  #{$elem}::selection {
    color: $color;
    background-color: $bgcolor;
  }
}

// placeholder
@mixin placeholder {
  ::-webkit-input-placeholder {
    @content;
  }

  :-moz-placeholder {
    @content;
  }

  :-ms-input-placeholder {
    @content;
  }
}

// noText
@mixin no-text {
  font-size: 0;
  line-height: 0;
  text-shadow: none;
  color: transparent;
}

// vertical-center
@mixin vertical-center {
  position: relative;
  top: 50%;

  @include transform(translateY(-50%));
}

// multi center
@mixin centerer__max($horizontal: true, $vertical: true) {
  position: absolute;

  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  }

  @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}

// transform
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
}

// hex  bg opacity
@mixin hex-bg($color, $opacity: 0.3) {
  background: $color;
  background: rgba($color, $opacity);
}

// rwd mixin
@mixin rwd($size) {
  @media all and (max-width: #{$size}) {
    @content;
  }
}

@mixin rwdm($size) {
  @media all and (min-width: #{$size}) {
    @content;
  }
}

// border radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;
}

// font options
@mixin font($rozmiar: 16, $waga: 500, $color: #fff) {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-size: calc-em($rozmiar);
  font-weight: $waga;
  color: $color;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// box shadow
@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $color;
    -moz-box-shadow: inset $top $left $blur $color;
    box-shadow: inset $top $left $blur $color;
  }

  @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)),
    $search,
    $replace);
  }

  @return $string;
}

/* stylelint-disable */
// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name,
  $path,
  $weight: null,
  $style: null,
  $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (eot: "?",
      svg: "#"+ str-replace($name, " ", "_"));

  $formats: (otf: "opentype",
      ttf: "truetype"
    );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext),
        $ext + map-get($extmods, $ext),
        $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src,
        url(quote($path + "." + $extmod)) format(quote($format)),
      comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

// $min-size: minimum element $property size in $unit specified
// $max-size: maximum element $property size in $unit specified
// $min-width: the screen width in $units where you want to lock in the $min-size
// $max-width: the screen width in $units where you want to lock in the $max-size
// $property: the property of the element that you would like to scale/lock
// $unit: the units which all measurements are taken in

@mixin css-lock($min-size: 1, $max-size: 1.4, $min-width: 20, $max-width: 100, $property: font-size, $unit: rem) {
  #{$property}: calc(#{$min-size}#{$unit} + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-width}#{$unit}) / (#{$max-width} - #{$min-width})));

  @media (max-width: #{$min-width}#{$unit}) {
    #{$property}: #{$min-size}#{$unit};
  }

  @media (min-width: #{$max-width}#{$unit}) {
    #{$property}: #{$max-size}#{$unit};
  }
}

@mixin respond-from($media) {
  @if $media==xs {
    @media (min-width: 0px) {
      @content;
    }
  }

  @else if $media==sm {
    @media (min-width: 768px) {
      @content;
    }
  }

  @else if $media==md {
    @media (min-width: 1200) {
      @content;
    }
  }

  @else if $media==lg {
    @media (min-width: 1440) {
      @content;
    }
  }

  @else if $media==xl {
    @media (min-width: 1800) {
      @content;
    }
  }
}

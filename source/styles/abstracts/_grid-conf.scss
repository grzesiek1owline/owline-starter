/// Variables
$max-width: 1920px !default;
$columns: 12;

$col-gutter: 15px;
$col-gutter-compensation: -15px;

$breakpoints: (
  "small" : 0px,
  "xs": 320px,
  "s": 768px,
  "m": 992px,
  "l": 1200px,
  "xl": 1366px,
  "xxl": 1600px,
) !default;

$flex-positions: (
  "start": "flex-start",
  "center": "center",
  "end": "flex-end",
  "around": "space-around",
  "between": "space-between",
  "stretch": "stretch"
);

/// Mixins
@mixin grid-generator($size, $grid-columns) {
	@for $i from 1 through $grid-columns {

    @if($size == '') {
      .col-#{$i} {
        width: percentage($i / $grid-columns);
        padding-left: $col-gutter;
        padding-right: $col-gutter;
        box-sizing: border-box;
        flex: 0 0 auto;
      }
    } @else {
      .col-#{$size}-#{$i} {
        width: percentage($i / $grid-columns);
        padding-left: $col-gutter;
        padding-right: $col-gutter;
        box-sizing: border-box;
        flex: 0 0 auto;
      }
    }
  }
}

@mixin pos-generator($name, $map) {
  @each $pos, $value in $map {
  	.justify-#{$name}-#{$pos} {
      justify-content: $value;
    }

    .align-items-#{$name}-#{$pos} {
      align-items: $value;
    }

    .align-self-#{$name}-#{$pos} {
      align-self: $value;
    }

    .align-content-#{$name}-#{$pos} {
      align-content: $value;
    }
  }
}

@mixin grid($map, $cols) {
  @each $name, $size in $map {
    @media all and (min-width: #{$size}) {
  		@include grid-generator($name, $cols);
    }
  }
}

@mixin positions($positions, $break) {
  @each $name, $size in $break {
    @media all and (min-width: #{$size}) {
  		@include pos-generator($name, $positions);
    }
  }
}


// @include grid($breakpoints, $columns);
// @include positions($flex-positions,$breakpoints);